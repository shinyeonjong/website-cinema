<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.allnightMovies.dao.DBMapper">

<!-- /* JI. SELECT MENU */ --> 	
	<resultMap type="com.allnightMovies.model.data.SubMenu" id="SubMenu">
		<result column="subMenuName" property="subMenuName"/>
		<result column="subMenuPage" property="subMenuPage"/>
	</resultMap>
	
	<resultMap type="com.allnightMovies.model.data.MainMenu" id="MainMenu">
		<result column="mainMenuName" property="mainMenuName"/>
		<result column="mainMenuPage" property="mainMenuPage"/>
		<collection property="subMenuList" resultMap="SubMenu"/>
	</resultMap>

	<select id="getMenus" resultMap="MainMenu">
		<![CDATA[
			SELECT 
			    MAIN_MENU_NAME mainMenuName, 
			    MAIN_MENU_PAGE mainMenuPage,
			    SUB_MENU_NAME subMenuName,
			    SUB_MENU_PAGE subMenuPage 
			FROM SUB_MENU  
			JOIN MAIN_MENU  
			ON(SUB_MAIN_MENU = MAIN_MENU_PAGE)
		]]>
	</select>
<!-- /* JI. LOGIN */ -->		
	<select id="login" resultType="com.allnightMovies.model.data.userInfo.UserPersonalLoginInfoDTO" parameterType="com.allnightMovies.model.params.Params">
		SELECT USER_ID userID, USER_STATES userStates, USER_PWD userPwd
		FROM USER_PERSONAL_INFO
		WHERE USER_ID = #{userID}
	</select>
		
<!-- /* JI. JOIN */ -->	
	<select id="idCheck" resultType="java.lang.Integer" parameterType="java.lang.String">
		SELECT COUNT(USER_ID) FROM USER_PERSONAL_INFO WHERE USER_ID=#{id}
	</select>

	<insert id="insertJoinUserInfo" parameterType="com.allnightMovies.model.data.userInfo.UserPersonalInfoDTO">
		INSERT INTO USER_PERSONAL_INFO(
			USER_ID,
		    USER_PWD,
		    USER_NAME,
		    USER_EMAIL,
		    USER_BIRTH,
		    USER_GENDER
		) VALUES (
			#{userID},
		    #{userPWD},
		    #{userName},
		    #{userEmail},
		    #{userBirth},
		    #{userGender}
		)
	</insert>

<!-- /* JI. TICKETING */ -->
	<!-- TICKETING : 예매 가능일자 가져오기 -->
	<select id="getMaxScreeningDate" resultType="com.allnightMovies.model.data.movieInfo.MovieScreeningDateInfo">
		SELECT TO_CHAR(SYSDATE, 'YYYY.MM.DD HH:MI') SCREENINGMINDATE, MAX(MOVIE_SCREENING_DATE) SCREENINGMAXDATE
		FROM MOVIE_SCREENING_PRICE
	</select>
	
	<!-- TICKETING : 상영일자에 맞추어 영화제목들 가져오기 -->
	<select id="getMovieTitle" resultType="com.allnightMovies.model.data.movieInfo.TicketingMovieTitleInfo">
		<![CDATA[
		SELECT 
        	DISTINCT MOVIE_TITLE MOVIETITLE,
			DECODE(MOVIE_AGE_LIMIT, 0, 'All', MOVIE_AGE_LIMIT) MOVIEAGELIMIT
		FROM MOVIE_BASIC_INFO MBI 
        JOIN (
        	SELECT * 
            FROM MOVIE_SCREENING_PRICE
            WHERE MOVIE_SCREENING_DATE >= TO_CHAR(SYSDATE, 'YYYY-MM-DD')) USING(MOVIE_TITLE)
        WHERE MOVIE_RELEASE_DATE < TO_CHAR(SYSDATE, 'YYYY-MM-DD')
        ]]>
	</select>
	
	<!-- TICKETING : 영화관, 영화 상영시간 정보 가져오기 -->
	<resultMap type="java.lang.String" id="movieTime">
		<result column="movieTime" property="movieTime"/>
	</resultMap>
	
	<resultMap type="com.allnightMovies.model.data.movieInfo.TicketingMovieTimeInfo" id="movieTimeInfo">
		<result column="movieTheather" property="movieTheather"/>
		<collection property="movieTime" resultMap="movieTime"/>
	</resultMap>
	
	<select id="getMovieTime" resultMap="movieTimeInfo">
		SELECT MOVIE_THEATHER MOVIETHEATHER, SUBSTR(MOVIE_SCREENING_DATE, 12, 5) MOVIETIME 
		FROM MOVIE_SCREENING_PRICE
		WHERE MOVIE_TITLE=#{param1} AND MOVIE_SCREENING_DATE LIKE #{param2}||'%'
		ORDER BY MOVIETHEATHER, MOVIETIME
	</select>
	
	<!-- TICKETING : 영화관 좌석정보 가져오기 -->
	<select id="getTheaterSeatInfo" resultType="com.allnightMovies.model.data.cinemaInfo.CinemaTheaterSeatDTO" parameterType="int">
		SELECT 
			THEATER,
		    THEATER_SEAT_ROW THEATERSEATROW,
		    THEATER_SEAT_COL_START THEATERSEATCOLSTART,
		    THEATER_SEAT_COL_END THEATERSEATCOLEND,
		    THEATER_WAY_INFO THEATERWAYINFO
		FROM CINEMA_THEATER_SEAT_INFO
		WHERE THEATER=#{theater}
	</select>
	
	<!-- TICKETING : 영화 금액정보 가져오기 -->
	<select id="getTicketPriceInfo" resultType="java.lang.Integer" parameterType="java.lang.String">
		SELECT MOVIE_PRICE MOVIEPRICE 
		FROM MOVIE_SCREENING_PRICE
		WHERE MOVIE_SCREENING_DATE=#{param1} AND MOVIE_THEATHER=#{param2}
	</select>
	
	<!-- TICKETING : 영화 포스터 가져오기 -->
	<select id="getMoviePoster" resultType="java.lang.String" parameterType="java.lang.String">
		SELECT MOVIE_POSTER MOVIEPOSTER
		FROM MOVIE_BASIC_INFO
		WHERE MOVIE_TITLE=#{title}
	</select>
	
	<!-- TICKETING : 고객이 선택한 좌석이 예매되어있는지 확인 -->
	<select id="checkEmptySeats" resultType="java.lang.Integer" parameterType="com.allnightMovies.model.data.userInfo.UserCheckEmptySeatsDTO">
		SELECT COUNT(*) CNT 
		FROM USER_TICKETING_INFO
		WHERE MOVIE_TITLE=#{movieTitle}
		AND THEATER=#{theater}
		AND MOVIE_SCREENING_DATE=#{movieScreeningDate}
		AND (
			<foreach collection="seatsList" index="index" item="type" separator="OR">
		    	THEATER_SEAT=#{type}
		    </foreach>
		)
	</select>
	
	<!-- TICKETING : 예매정보 insert -->
	<insert id="userTicketingInfoInsert" parameterType="com.allnightMovies.model.data.userInfo.UserTicketingInfo">
		<foreach collection="theaterSeat" index="index" item="seat" open="INSERT ALL " separator=" " close="SELECT * FROM DUAL">
			INTO USER_TICKETING_INFO (
				USER_ID, 
				MOVIE_TITLE, 
				THEATER, 
				MOVIE_SCREENING_DATE, 
				THEATER_SEAT, 
				USER_TICKET_COUNT, 
				USER_TOTAL_PRICE, 
				USER_TICKETING_DATE, 
				USER_TICKET_NUMBER
			) VALUES (
				#{userID}, 
				#{movieTitle},
				#{theater}, 
				#{movieScreeningDate}, 
				#{seat}, 
				#{userTicketCount}, 
				#{userTotalPrice}, 
				SYSDATE, 
				#{userTicketNumber}
			)
		</foreach>
	</insert>
<!-- JUNG. 상영시간 list -->
	<resultMap type="com.allnightMovies.model.data.movieInfo.MovieshowTableDTO" id="MovieshowTableDTO">
		<result column="screening_time"	property="screening_time"/>
		<result column="movie_theather" property="movie_theather"/>
	</resultMap>
	
	<resultMap type="com.allnightMovies.model.data.movieInfo.MovieShowTitleDTO" id="MovieShowTitleDTO">
		<result column="movie_title"	property="movie_title"/>
		<collection property="movieshowTableDTO" resultMap="MovieshowTableDTO"/>
	</resultMap>

	<resultMap type="com.allnightMovies.model.data.movieInfo.MovieShowTimesMap" id="MovieShowTimesMap">
		<result column="screening_Date" property="screening_Date" />
		<collection property="movieShowTitleDTO" resultMap="MovieShowTitleDTO"/>	
	</resultMap>
	
<!-- JUNG. 상영시간표  -> 상영날짜 LIST -->
	<select id="showtimes" resultMap="MovieShowTimesMap" parameterType="java.util.Map"> 
		SELECT 
		    DISTINCT SUBSTR(MOVIE_SCREENING_DATE,6,5) AS SCREENING_DATE,
		    MOVIE_THEATHER,
		    SUBSTR(MOVIE_SCREENING_DATE,12,5) AS SCREENING_TIME,
		    MOVIE_TITLE
		FROM MOVIE_SCREENING_PRICE 
		ORDER BY SCREENING_DATE ASC, MOVIE_TITLE ASC, SCREENING_DATE ASC
	</select>
	
	<!--아이디(회원정보)-->
<!--JUNG. 아이디 찾기-->
	<select id = "searchId" resultType="java.lang.String" parameterType="com.allnightMovies.model.params.Params">
		SELECT 
			USER_ID 
			FROM USER_PERSONAL_INFO 
		WHERE USER_NAME = #{param1} AND  USER_BIRTH = #{param2} AND USER_GENDER = #{param3}
	</select>
	
	
<!--JUNG. 아이디 (유무)-->
	<select id= "searchIdCount" resultType="java.lang.Integer" parameterType="com.allnightMovies.model.params.Params">
		SELECT COUNT(USER_ID) 
			FROM USER_PERSONAL_INFO 
		WHERE USER_NAME = #{param1} AND  USER_BIRTH = #{param2} AND USER_GENDER = #{param3}	
	</select>

<!-- 아이디(이메일) -->
 	<select id="searchEmailCount" resultType="java.lang.Integer" parameterType="com.allnightMovies.model.params.Params">
		SELECT COUNT(USER_ID)
			FROM USER_PERSONAL_INFO
		WHERE USER_EMAIL = #{param1}
	</select> 
	
	<select id ="searchIDEmail" resultType="java.lang.String" parameterType="com.allnightMovies.model.params.Params">
		SELECT USER_ID
			FROM USER_PERSONAL_INFO
		WHERE USER_EMAIL = #{param1}
	</select>
	
<!-- 자주묻는질문게시판 -->
	<select id="serviceCenter" parameterType="java.lang.String" resultType="com.allnightMovies.model.data.cinemaInfo.CinemaFrequentlyBoardDTO">
		SELECT
			NO,
			QUESTION,
			ASKED
		FROM CINEMA_FREQUENTLY_BOARD
	</select>	

 	<select id="serviceCentergetBoard" parameterType="java.lang.Integer" resultType="com.allnightMovies.model.data.cinemaInfo.CinemaFrequentlyBoardDTO">
		SELECT * FROM (
              SELECT NO, QUESTION, ASKED, ROWNUM RNUM 
         FROM (
                SELECT NO, QUESTION, ASKED
                  FROM CINEMA_FREQUENTLY_BOARD
                  ORDER BY NO
                )
             )
                 WHERE RNUM BETWEEN #{param1} AND #{param2}
	</select>
	
	<select id="serviceCentergetBoardCount" resultType ="java.lang.Integer">
		 SELECT COUNT(*) 
		 	FROM CINEMA_FREQUENTLY_BOARD
	</select>
<!--자주묻는게시판 검색 갯수-->
	<select id="userSearchList" resultType="java.lang.Integer" >
		SELECT COUNT(*)
			 FROM CINEMA_FREQUENTLY_BOARD 
			 	WHERE QUESTION LIKE #{serviceCenterSearchWord} 
			 			OR ASKED LIKE #{serviceCenterSearchWord}
	</select>	
	
<!--리스트불러오기 -->
	<select id="getUserSearchList" parameterType="com.allnightMovies.model.data.cinemaInfo.CinemaFrequentlyBoardNumberDTO" resultType="com.allnightMovies.model.data.cinemaInfo.CinemaFrequentlyBoardDTO">
		SELECT * 
		FROM (
			SELECT 
				NO, 
				QUESTION, 
				ASKED,
           		ROWNUM RNUM
  			FROM (
	        	SELECT 
	        		NO, 
	        		QUESTION, 
	        		ASKED
	        	FROM CINEMA_FREQUENTLY_BOARD
	        	WHERE QUESTION LIKE #{param3} OR ASKED LIKE #{param3}
	        )
	    ) WHERE RNUM BETWEEN #{param1} AND #{param2}
	</select>
	
	
<!-- 문의사항게시판 -->
	<select id="questionBoardCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
			FROM CINEMA_ASKED_BOARD
	</select>

	 <select id="questionBoard" resultType="com.allnightMovies.model.data.cinemaInfo.CinemaQuestionBoardDTO" parameterType="java.lang.Integer">
			SELECT * FROM (
      				SELECT NO, TITLE, CONTENT, USER_ID, WRITE_DATE, WRITEPWD, ISPWD, ROWNUM RNUM 
      				FROM (
              			 SELECT NO, TITLE, TO_CHAR(WRITE_DATE, 'MM/DD') AS WRITE_DATE, USER_ID, CONTENT, WRITEPWD, ISPWD
              			 FROM CINEMA_ASKED_BOARD 
               			 ORDER BY NO DESC
           			 )		
     			 )    
      			WHERE RNUM BETWEEN #{param1} and #{param2}
	</select> 

<!-- 문의사항게시판 전체 뽑아오기 -->	
	<select id="questionBoardList" resultType="com.allnightMovies.model.data.cinemaInfo.CinemaQuestionBoardDTO" parameterType="java.lang.Integer">
					SELECT * FROM (
      				SELECT NO, TITLE, CONTENT, USER_ID, WRITE_DATE, WRITEPWD, ISPWD, ROWNUM RNUM 
      				FROM (
              			 SELECT NO, TITLE, TO_CHAR(WRITE_DATE, 'MM/DD') AS WRITE_DATE, USER_ID, CONTENT, WRITEPWD, ISPWD
              			 FROM CINEMA_ASKED_BOARD 
               			 ORDER BY NO DESC
           			 )		
     			 )    
      			WHERE NO = #{param1}
	</select>

<!-- 문의사항 글등록 -->
	<select id="InsertAskWriteBoard" parameterType="com.allnightMovies.model.data.cinemaInfo.CinemaQuestionBoardDTO" >
		INSERT INTO CINEMA_ASKED_BOARD(
		    NO,
		    TITLE,
		    CONTENT,
		    USER_ID,
		    WRITE_DATE,
		    WRITEPWD,
		    ISPWD
   		 ) VALUES (
       		ASKED_QUESTIONS_BOARD_SEQ.NEXTVAL,
       		#{title},
       		#{content},
       		#{user_Id},
       		SYSDATE,
       		#{writePwd},
       		#{isPwd}
       	)

	</select>
	
<!--문의사항게시판 수정 -->
	<select id="completeUPdateWriteBoard" parameterType="com.allnightMovies.model.data.cinemaInfo.CinemaQuestionBoardDTO" >
		UPDATE 
			CINEMA_ASKED_BOARD 
			SET TITLE = #{param1}, 
				CONTENT = #{param2}, 
				WRITEPWD = #{param3}, 
				ISPWD = #{param4} 
			WHERE NO = #{param5}
	</select>

<!--문의사항게시판 삭제 -->
	<select id="completeDeleteQuestionBoard" parameterType="java.lang.String" >
		DELETE 
			FROM CINEMA_ASKED_BOARD
		WHERE NO = #{param1}
	</select> 
	


<!-- /* SHIN. SEARCH PWD */ -->	
	<select id="searchPWD" resultType="java.lang.Integer" parameterType="java.lang.String">
		SELECT COUNT(*) 
		FROM USER_PERSONAL_INFO 
		WHERE USER_ID = #{searchPwdUserID}
	</select>	
	<select id="searchEmail" resultType="java.lang.String" parameterType="java.lang.String">
		SELECT USER_EMAIL 
		FROM USER_PERSONAL_INFO 
		WHERE USER_ID = #{searchPwdUserID}
	</select>
	<select id="updateNewPwd" resultType="java.lang.String" parameterType="java.lang.String">
		UPDATE USER_PERSONAL_INFO 
		SET USER_PWD = #{param2}
		WHERE USER_ID = #{param1}
	</select>	
	
<!-- SHIN. MY INFO -->
   <select id="selectMyInfo" resultType="com.allnightMovies.model.data.userInfo.UserPersonalInfoDTO" parameterType="java.lang.String">
      SELECT 
         USER_ID      as userID,
         USER_PWD     as userPWD,
         USER_NAME    as userName,
         DECODE(USER_GENDER, 'female', '여자', 'male' ,'남자') as userGender,
         USER_BIRTH   as userBirth,
         USER_EMAIL   as userEmail,
         USER_REGDATE as userRegDate,
         USER_STATES  as userStates
      FROM USER_PERSONAL_INFO
      WHERE USER_ID = #{myInfoID}   
   </select> 
   
   <select id="selectUserPWD" resultType="java.lang.String" parameterType="java.lang.String">
      SELECT USER_PWD
      FROM USER_PERSONAL_INFO
      WHERE USER_ID = #{myInfoID}
   </select>

	<select id="updateWithdraw" resultType="java.lang.String" parameterType="java.lang.String">
		UPDATE USER_PERSONAL_INFO 
		SET USER_STATES = 0
		WHERE USER_ID = #{myInfoID}
	</select>
	
	<select id="updateEmailAddr" resultType="java.lang.String" parameterType="java.lang.String">
		UPDATE USER_PERSONAL_INFO 
		SET USER_EMAIL = #{param1}
		WHERE USER_ID = #{param2}
	</select>

<!-- SHIN. MOVIE  CURRENTFILM // SORT-->	
	<select id="getCurrentFilmDTO" resultType="com.allnightMovies.model.data.movieInfo.MovieCurrentFilmDTO">
		SELECT * FROM (
			SELECT MOVIE_TITLE  movieTitle,
                   MOVIE_POSTER moviePoster,
                   DECODE(MOVIE_AGE_LIMIT, 0, 'All', 12 ,'12', 15, '15', 19, '19') movieAgeLimit,
                   ROWNUM RNUM
			FROM (
				SELECT *
				FROM MOVIE_BASIC_INFO 
				WHERE MOVIE_RELEASE_DATE <![CDATA[<]]> SYSDATE 
				ORDER BY MOVIE_TITLE ASC
			    )
			)   
	</select>
	<select id="sortScore" resultType="com.allnightMovies.model.data.movieInfo.MovieCurrentFilmDTO">
		SELECT * FROM (
			SELECT MOVIE_TITLE  movieTitle,
                   MOVIE_POSTER moviePoster,
                   DECODE(MOVIE_AGE_LIMIT, 0, 'All', 12 ,'12', 15, '15', 19, '19') movieAgeLimit,
                   REVIEW_EVALUATE score,
                   ROWNUM RNUM
			FROM (
				SELECT *
				FROM MOVIE_BASIC_INFO 
				WHERE MOVIE_RELEASE_DATE <![CDATA[<]]> SYSDATE 
				ORDER BY REVIEW_EVALUATE DESC
			    )
			)   
	</select>
	
	<select id="sortTicketing" resultType="com.allnightMovies.model.data.movieInfo.MovieCurrentFilmDTO">
		SELECT * FROM (
			SELECT MOVIE_TITLE  movieTitle,
                   MOVIE_POSTER moviePoster,
                   DECODE(MOVIE_AGE_LIMIT, 0, 'All', 12 ,'12', 15, '15', 19, '19') movieAgeLimit,
                   ROWNUM RNUM
			FROM (
				SELECT *
				FROM MOVIE_BASIC_INFO 
				WHERE MOVIE_RELEASE_DATE <![CDATA[<]]> SYSDATE 
				ORDER BY MOVIE_TITLE ASC
			    )
			)  
	</select>
	
<!-- SHIN. MOVIE  plannedFilm -->		
	<select id="getPlannedFilmDTO" resultType="com.allnightMovies.model.data.movieInfo.MovieScreeningsPlannedDTO">
		SELECT * FROM (
			SELECT MOVIE_TITLE  movieTitle,
                   MOVIE_POSTER moviePoster,
                   DECODE(MOVIE_AGE_LIMIT, 0, 'All', 12 ,'12', 15, '15', 19, '19') movieAgeLimit,
                   ROWNUM RNUM
			FROM (
				SELECT *
				FROM MOVIE_BASIC_INFO 
				WHERE MOVIE_RELEASE_DATE <![CDATA[>]]> SYSDATE 
				ORDER BY MOVIE_TITLE ASC
			    )
			)   
	</select>
	
<!-- SHIN. SERVICE noticeBoard -->
	<select id="getNoticeBoardCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM CINEMA_NOTICE_BOARD
	</select>
	
	<select id="getCinemaNoticeBoardDTO" resultType="com.allnightMovies.model.data.cinemaInfo.CinemaNoticeBoardDTO" parameterType="java.lang.Integer">
		SELECT * FROM (
			SELECT NO		  no, 
			       TITLE	  title,
			       writeDate, 
			       CONTENT	  content,
			       IMPORTANT  important,
			       ROWNUM RNUM 
			FROM (
			         SELECT NO, TITLE, TO_CHAR(WRITE_DATE, 'YYYY/MM/DD') AS writeDate, CONTENT, IMPORTANT
			         FROM CINEMA_NOTICE_BOARD 
			         ORDER BY IMPORTANT DESC, writeDate DESC
			      )
			)    
		WHERE RNUM BETWEEN #{param1} AND #{param2}
	</select>
	
	<select id="getNoticeBoardContent" resultType="com.allnightMovies.model.data.cinemaInfo.CinemaNoticeBoardDTO" parameterType="java.lang.Integer">
		SELECT TITLE title, 
			   TO_CHAR(WRITE_DATE, 'YYYY/MM/DD') writeDate,  
			   CONTENT content
		FROM CINEMA_NOTICE_BOARD
		WHERE NO = #{noticeNo}
	</select>
	
	<select id="searchBoardCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM CINEMA_NOTICE_BOARD
		WHERE TITLE LIKE #{searchWord} OR CONTENT LIKE #{searchWord}
	</select>
	
	<select id="searchBoard" resultType="com.allnightMovies.model.data.cinemaInfo.CinemaNoticeBoardDTO" parameterType="com.allnightMovies.model.data.cinemaInfo.CinemaNoticeSearchBoardDTO">
		SELECT * FROM (
		SELECT NO		  no, 
		       TITLE	  title,
		       writeDate, 
		       CONTENT	  content,
		       IMPORTANT  important,
		       ROWNUM RNUM 
		FROM (
		         SELECT NO, TITLE, TO_CHAR(WRITE_DATE, 'YYYY/MM/DD') AS writeDate, CONTENT, IMPORTANT
		         FROM CINEMA_NOTICE_BOARD 
		         WHERE TITLE LIKE #{param3} OR CONTENT LIKE #{param3}
		         ORDER BY IMPORTANT DESC, writeDate DESC
		      )
		)    
		WHERE RNUM BETWEEN #{param1} AND #{param2}
	</select>
	
<!-- SHIN. theater introduce -->

	<select id="getCinemaIntroImg" resultType="com.allnightMovies.model.data.theater.CinemaIntroduceDTO">
		SELECT CINEMA_INTRO_IMAGE cinemaIntroImg
		FROM CINEMA_INTRODUCE
	</select>
	
<!-- MAIN PAGE -->	
	<select id="getMainEvnetImg" resultType="com.allnightMovies.model.data.movieInfo.MainPageEventDTO">
		SELECT MAIN_EVENT mainEventImg
		FROM MAIN_PAGE
	</select>
	
	<select id="getNewFilmDTO" resultType="com.allnightMovies.model.data.movieInfo.MovieCurrentFilmDTO">
		SELECT * FROM (
				SELECT MOVIE_TITLE  movieTitle,
	                   MOVIE_POSTER moviePoster,
	                   MOVIE_RELEASE_DATE,
	                   DECODE(MOVIE_AGE_LIMIT, 0, 'All', 12 ,'12', 15, '15', 19, '19') movieAgeLimit,
	                   ROWNUM RNUM
				FROM (
					SELECT *
					FROM MOVIE_BASIC_INFO 
					WHERE MOVIE_RELEASE_DATE <![CDATA[<]]> SYSDATE 
					ORDER BY MOVIE_TITLE ASC
				    )
				) 
	      WHERE RNUM <![CDATA[<]]>= 4
	</select>
	
	<select id="getMainNoticeDTO" resultType="com.allnightMovies.model.data.cinemaInfo.CinemaNoticeBoardDTO">
		SELECT * FROM (
			SELECT NO		  no, 
			       TITLE	  title,
			       writeDate, 
			       CONTENT	  content,
			       IMPORTANT  important,
			       ROWNUM RNUM 
			FROM (
			         SELECT NO, TITLE, TO_CHAR(WRITE_DATE, 'YYYY/MM/DD') AS writeDate, CONTENT, IMPORTANT
			         FROM CINEMA_NOTICE_BOARD 
			         ORDER BY IMPORTANT DESC, writeDate DESC
			      )
			)    
		WHERE RNUM <![CDATA[<]]>= 10
	</select>
	
</mapper>
